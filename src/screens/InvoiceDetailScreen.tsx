import React from "react";
import {
  View,
  Text,
  TouchableOpacity,
  ScrollView,
  SafeAreaView,
  Alert,
  Platform,
  StatusBar,
} from "react-native";
import { LinearGradient } from "expo-linear-gradient";
import { Ionicons } from "@expo/vector-icons";
import { useNavigation, useRoute } from "@react-navigation/native";
import { useSafeAreaInsets } from "react-native-safe-area-context";
import { THEME } from "../styles/themes";
import { invoiceDetailStyles } from "../styles/screens";
import { Invoice, InvoiceStatus, TaxType } from "../types";
import { formatDate, formatCurrency } from "../utils/format";
import { useInvoice } from "../hooks";

const InvoiceDetailScreen = () => {
  const navigation = useNavigation<any>();
  const route = useRoute<any>();
  const insets = useSafeAreaInsets();
  const { updateInvoiceStatus, getInvoiceById, deleteInvoice } = useInvoice();

  const { invoiceId } = route.params;

  // ÏÉòÌîå Í≥ÑÏÇ∞ÏÑú Îç∞Ïù¥ÌÑ∞ (Ïã§Ï†úÎ°úÎäî IDÎ°ú Ï°∞Ìöå)
  const invoice: Invoice = {
    id: invoiceId,
    invoiceNumber: "INV-2024-001",
    companyId: "comp1",
    items: [
      {
        id: "item1",
        name: "Ï∞©ÌïúÏÜêÎëêÎ∂Ä",
        quantity: 10,
        unitPrice: 2000,
        amount: 20000,
        taxType: "Í≥ºÏÑ∏" as TaxType,
        taxAmount: 2000,
        totalAmount: 22000,
      },
      {
        id: "item2",
        name: "ÏãúÎ£®ÏΩ©ÎÇòÎ¨º",
        quantity: 5,
        unitPrice: 1500,
        amount: 7500,
        taxType: "Î©¥ÏÑ∏" as TaxType,
        taxAmount: 0,
        totalAmount: 7500,
      },
    ],
    totalSupplyAmount: 27500,
    totalTaxAmount: 2000,
    totalAmount: 29500,
    issueDate: new Date(),
    status: "Î∞úÌñâ" as InvoiceStatus,
    memo: "Ï†ïÍ∏∞ ÎÇ©Ìíà Í≥ÑÏÇ∞ÏÑúÏûÖÎãàÎã§.",
    createdAt: new Date(),
    updatedAt: new Date(),
  };

  const handleEdit = () => {
    navigation.navigate("InvoiceEdit", { invoiceId: invoice.id });
  };

  const handleDelete = () => {
    Alert.alert(
      "Í≥ÑÏÇ∞ÏÑú ÏÇ≠Ï†ú",
      `${invoice.invoiceNumber} Í≥ÑÏÇ∞ÏÑúÎ•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?\n\n‚ö†Ô∏è ÏÇ≠Ï†úÎêú Í≥ÑÏÇ∞ÏÑúÎäî Î≥µÍµ¨Ìï† Ïàò ÏóÜÏäµÎãàÎã§.`,
      [
        { text: "Ï∑®ÏÜå", style: "cancel" },
        {
          text: "ÏÇ≠Ï†ú",
          style: "destructive",
          onPress: async () => {
            const success = await deleteInvoice(invoiceId);
            if (success) {
              Alert.alert(
                "ÏÇ≠Ï†ú ÏôÑÎ£å",
                `${invoice.invoiceNumber} Í≥ÑÏÇ∞ÏÑúÍ∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.`,
                [{ text: "ÌôïÏù∏", onPress: () => navigation.goBack() }]
              );
            } else {
              Alert.alert("Ïò§Î•ò", "Í≥ÑÏÇ∞ÏÑú ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
            }
          },
        },
      ]
    );
  };

  const handleStatusChange = async (newStatus: InvoiceStatus) => {
    const statusDescription = getStatusDescription(newStatus);

    Alert.alert(
      "ÏÉÅÌÉú Î≥ÄÍ≤Ω",
      `Í≥ÑÏÇ∞ÏÑú ÏÉÅÌÉúÎ•º "${newStatus}"Î°ú Î≥ÄÍ≤ΩÌïòÏãúÍ≤†ÏäµÎãàÍπå?\n\n${statusDescription}`,
      [
        { text: "Ï∑®ÏÜå", style: "cancel" },
        {
          text: "Î≥ÄÍ≤Ω",
          onPress: async () => {
            const success = await updateInvoiceStatus(invoiceId, newStatus);
            if (success) {
              // ÏÉÅÌÉú Î≥ÄÍ≤Ω ÌõÑ ÌôîÎ©¥ ÏÉàÎ°úÍ≥†Ïπ®ÏùÑ ÏúÑÌï¥ Îã§Ïãú Í∞ÄÏ†∏Ïò§Í∏∞
              const updatedInvoice = getInvoiceById(invoiceId);
              if (updatedInvoice) {
                // Ïù∏Î≥¥Ïù¥Ïä§ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ (Ïã§Ï†úÎ°úÎäî useStateÎ°ú Í¥ÄÎ¶¨Ìï¥Ïïº ÌïòÏßÄÎßå Ïó¨Í∏∞ÏÑúÎäî Îã®ÏàúÌôî)
                Alert.alert(
                  "ÏôÑÎ£å",
                  `${updatedInvoice.invoiceNumber} Í≥ÑÏÇ∞ÏÑú ÏÉÅÌÉúÍ∞Ä "${newStatus}"Î°ú Î≥ÄÍ≤ΩÎêòÏóàÏäµÎãàÎã§.`,
                  [{ text: "ÌôïÏù∏", onPress: () => navigation.goBack() }]
                );
              }
            } else {
              Alert.alert("Ïò§Î•ò", "ÏÉÅÌÉú Î≥ÄÍ≤ΩÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
            }
          },
        },
      ]
    );
  };

  // ÏÉÅÌÉúÎ≥Ñ ÏÑ§Î™Ö Ìï®Ïàò (Í≥ÑÏÇ∞ÏÑú ÏÉùÏÑ± ÌôîÎ©¥Í≥º ÎèôÏùº)
  const getStatusDescription = (status: InvoiceStatus): string => {
    switch (status) {
      case "ÏûÑÏãúÏ†ÄÏû•":
        return "üìù ÏûëÏÑ± Ï§ëÏù∏ Í≥ÑÏÇ∞ÏÑúÏûÖÎãàÎã§. Ïñ∏Ï†úÎì† ÏàòÏ†ïÌï† Ïàò ÏûàÏäµÎãàÎã§.";
      case "Î∞úÌñâ":
        return "‚úÖ ÏôÑÏÑ±Îêú Í≥ÑÏÇ∞ÏÑúÏûÖÎãàÎã§. Í±∞ÎûòÏ≤òÏóê Î∞úÏÜ°Ìï† Ï§ÄÎπÑÍ∞Ä ÎêòÏóàÏäµÎãàÎã§.";
      case "Ï†ÑÏÜ°":
        return "üì§ Í±∞ÎûòÏ≤òÏóê Î∞úÏÜ°Îêú Í≥ÑÏÇ∞ÏÑúÏûÖÎãàÎã§. ÏäπÏù∏ÏùÑ Í∏∞Îã§Î¶¨Í≥† ÏûàÏäµÎãàÎã§.";
      case "ÏäπÏù∏":
        return "üéâ Í±∞ÎûòÏ≤òÏóêÏÑú ÏäπÏù∏Îêú Í≥ÑÏÇ∞ÏÑúÏûÖÎãàÎã§. Í±∞ÎûòÍ∞Ä ÌôïÏ†ïÎêòÏóàÏäµÎãàÎã§.";
      case "Ï∑®ÏÜå":
        return "‚ùå Ï∑®ÏÜåÎêú Í≥ÑÏÇ∞ÏÑúÏûÖÎãàÎã§. Îçî Ïù¥ÏÉÅ Ïú†Ìö®ÌïòÏßÄ ÏïäÏäµÎãàÎã§.";
      default:
        return "";
    }
  };

  const getStatusColor = (status: InvoiceStatus) => {
    switch (status) {
      case "ÏûÑÏãúÏ†ÄÏû•":
        return THEME.colors.warning;
      case "Î∞úÌñâ":
        return THEME.colors.success;
      case "Ï†ÑÏÜ°":
        return THEME.colors.primary;
      case "ÏäπÏù∏":
        return THEME.colors.success;
      case "Ï∑®ÏÜå":
        return THEME.colors.error;
      default:
        return THEME.colors.textSecondary;
    }
  };

  const getTaxTypeColor = (taxType: TaxType) => {
    switch (taxType) {
      case "Í≥ºÏÑ∏":
        return THEME.colors.primary;
      case "Î©¥ÏÑ∏":
        return THEME.colors.success;
      case "ÏòÅÏÑ∏":
        return THEME.colors.warning;
      default:
        return THEME.colors.textSecondary;
    }
  };

  return (
    <>
      <StatusBar
        backgroundColor={THEME.colors.primary}
        barStyle="light-content"
      />
      <SafeAreaView
        style={[
          invoiceDetailStyles.container,
          {
            paddingTop: Platform.OS === "android" ? 10 : insets.top,
          },
        ]}
      >
        <LinearGradient
          colors={[THEME.colors.primary, THEME.colors.primary]}
          style={invoiceDetailStyles.header}
        >
          <View style={invoiceDetailStyles.headerContent}>
            <TouchableOpacity
              style={invoiceDetailStyles.backButton}
              onPress={() => navigation.goBack()}
            >
              <Ionicons
                name="arrow-back"
                size={24}
                color={THEME.colors.white}
              />
            </TouchableOpacity>
            <Text style={invoiceDetailStyles.headerTitle}>Í≥ÑÏÇ∞ÏÑú ÏÉÅÏÑ∏</Text>
            <TouchableOpacity
              style={invoiceDetailStyles.editButton}
              onPress={handleEdit}
            >
              <Ionicons
                name="create-outline"
                size={24}
                color={THEME.colors.white}
              />
            </TouchableOpacity>
          </View>
        </LinearGradient>

        <ScrollView
          style={invoiceDetailStyles.content}
          showsVerticalScrollIndicator={false}
        >
          {/* Í∏∞Î≥∏ Ï†ïÎ≥¥ */}
          <View style={invoiceDetailStyles.section}>
            <Text style={invoiceDetailStyles.sectionTitle}>Í∏∞Î≥∏ Ï†ïÎ≥¥</Text>

            <View style={invoiceDetailStyles.infoRow}>
              <Text style={invoiceDetailStyles.infoLabel}>Í≥ÑÏÇ∞ÏÑú Î≤àÌò∏</Text>
              <Text style={invoiceDetailStyles.infoValue}>
                {invoice.invoiceNumber}
              </Text>
            </View>

            <View style={invoiceDetailStyles.infoRow}>
              <Text style={invoiceDetailStyles.infoLabel}>Î∞úÌñâÏùº</Text>
              <Text style={invoiceDetailStyles.infoValue}>
                {formatDate(invoice.issueDate)}
              </Text>
            </View>

            <View style={invoiceDetailStyles.infoRow}>
              <Text style={invoiceDetailStyles.infoLabel}>ÏÉÅÌÉú</Text>
              <View style={invoiceDetailStyles.statusContainer}>
                <View
                  style={[
                    invoiceDetailStyles.statusBadge,
                    { backgroundColor: getStatusColor(invoice.status) + "20" },
                  ]}
                >
                  <Text
                    style={[
                      invoiceDetailStyles.statusText,
                      { color: getStatusColor(invoice.status) },
                    ]}
                  >
                    {invoice.status}
                  </Text>
                </View>
                <TouchableOpacity
                  style={invoiceDetailStyles.statusChangeButton}
                  onPress={() => {
                    const statusOptions = [
                      { text: "Ï∑®ÏÜå", style: "cancel" as const },
                      {
                        text: "üìù ÏûÑÏãúÏ†ÄÏû•",
                        onPress: () => handleStatusChange("ÏûÑÏãúÏ†ÄÏû•"),
                      },
                      {
                        text: "‚úÖ Î∞úÌñâ",
                        onPress: () => handleStatusChange("Î∞úÌñâ"),
                      },
                      {
                        text: "üì§ Ï†ÑÏÜ°",
                        onPress: () => handleStatusChange("Ï†ÑÏÜ°"),
                      },
                      {
                        text: "üéâ ÏäπÏù∏",
                        onPress: () => handleStatusChange("ÏäπÏù∏"),
                      },
                      {
                        text: "‚ùå Ï∑®ÏÜå",
                        onPress: () => handleStatusChange("Ï∑®ÏÜå"),
                      },
                    ];

                    Alert.alert(
                      "Í≥ÑÏÇ∞ÏÑú ÏÉÅÌÉú Î≥ÄÍ≤Ω",
                      `ÌòÑÏû¨ ÏÉÅÌÉú: ${invoice.status}\n\nÎ≥ÄÍ≤ΩÌï† ÏÉÅÌÉúÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî:`,
                      statusOptions
                    );
                  }}
                >
                  <Ionicons
                    name="chevron-down"
                    size={16}
                    color={THEME.colors.primary}
                  />
                </TouchableOpacity>
              </View>
            </View>

            {invoice.memo && (
              <View style={invoiceDetailStyles.infoRow}>
                <Text style={invoiceDetailStyles.infoLabel}>Î©îÎ™®</Text>
                <Text style={invoiceDetailStyles.infoValue}>
                  {invoice.memo}
                </Text>
              </View>
            )}
          </View>

          {/* ÌíàÎ™© Ï†ïÎ≥¥ */}
          <View style={invoiceDetailStyles.section}>
            <Text style={invoiceDetailStyles.sectionTitle}>ÌíàÎ™© Ï†ïÎ≥¥</Text>

            {invoice.items.map((item, index) => (
              <View key={item.id} style={invoiceDetailStyles.itemCard}>
                <View style={invoiceDetailStyles.itemHeader}>
                  <Text style={invoiceDetailStyles.itemName}>{item.name}</Text>
                  <View
                    style={[
                      invoiceDetailStyles.taxTypeBadge,
                      { backgroundColor: getTaxTypeColor(item.taxType) + "20" },
                    ]}
                  >
                    <Text
                      style={[
                        invoiceDetailStyles.taxTypeText,
                        { color: getTaxTypeColor(item.taxType) },
                      ]}
                    >
                      {item.taxType}
                    </Text>
                  </View>
                </View>

                <View style={invoiceDetailStyles.itemDetails}>
                  <View style={styles.itemDetailRow}>
                    <Text
                      style={[
                        styles.itemDetailLabel,
                        { color: COLORS.textSecondary },
                      ]}
                    >
                      ÏàòÎüâ
                    </Text>
                    <Text
                      style={[styles.itemDetailValue, { color: COLORS.text }]}
                    >
                      {item.quantity}Í∞ú
                    </Text>
                  </View>

                  <View style={styles.itemDetailRow}>
                    <Text
                      style={[
                        styles.itemDetailLabel,
                        { color: COLORS.textSecondary },
                      ]}
                    >
                      Îã®Í∞Ä
                    </Text>
                    <Text
                      style={[styles.itemDetailValue, { color: COLORS.text }]}
                    >
                      {formatCurrency(item.unitPrice)}
                    </Text>
                  </View>

                  <View style={styles.itemDetailRow}>
                    <Text
                      style={[
                        styles.itemDetailLabel,
                        { color: COLORS.textSecondary },
                      ]}
                    >
                      Í≥µÍ∏âÍ∞ÄÏï°
                    </Text>
                    <Text
                      style={[styles.itemDetailValue, { color: COLORS.text }]}
                    >
                      {formatCurrency(item.amount)}
                    </Text>
                  </View>

                  <View style={styles.itemDetailRow}>
                    <Text
                      style={[
                        styles.itemDetailLabel,
                        { color: COLORS.textSecondary },
                      ]}
                    >
                      ÏÑ∏Ïï°
                    </Text>
                    <Text
                      style={[styles.itemDetailValue, { color: COLORS.text }]}
                    >
                      {formatCurrency(item.taxAmount)}
                    </Text>
                  </View>

                  <View style={[styles.itemDetailRow, styles.totalRow]}>
                    <Text
                      style={[styles.itemTotalLabel, { color: COLORS.text }]}
                    >
                      Ìï©Í≥Ñ
                    </Text>
                    <Text
                      style={[styles.itemTotalValue, { color: COLORS.primary }]}
                    >
                      {formatCurrency(item.totalAmount)}
                    </Text>
                  </View>
                </View>
              </View>
            ))}
          </View>

          {/* Ìï©Í≥Ñ Í∏àÏï° */}
          <View style={[styles.section, { backgroundColor: COLORS.white }]}>
            <Text style={[styles.sectionTitle, { color: COLORS.text }]}>
              Ìï©Í≥Ñ Í∏àÏï°
            </Text>

            <View style={styles.totalContainer}>
              <View style={styles.totalRow}>
                <Text
                  style={[styles.totalLabel, { color: COLORS.textSecondary }]}
                >
                  Í≥µÍ∏âÍ∞ÄÏï°
                </Text>
                <Text style={[styles.totalValue, { color: COLORS.text }]}>
                  {formatCurrency(invoice.totalSupplyAmount)}
                </Text>
              </View>

              <View style={styles.totalRow}>
                <Text
                  style={[styles.totalLabel, { color: COLORS.textSecondary }]}
                >
                  ÏÑ∏Ïï°
                </Text>
                <Text style={[styles.totalValue, { color: COLORS.text }]}>
                  {formatCurrency(invoice.totalTaxAmount)}
                </Text>
              </View>

              <View style={[styles.totalRow, styles.grandTotalRow]}>
                <Text style={[styles.grandTotalLabel, { color: COLORS.text }]}>
                  Ï¥ù Ìï©Í≥Ñ
                </Text>
                <Text
                  style={[styles.grandTotalValue, { color: COLORS.primary }]}
                >
                  {formatCurrency(invoice.totalAmount)}
                </Text>
              </View>
            </View>
          </View>

          {/* Ïï°ÏÖò Î≤ÑÌäºÎì§ */}
          <View style={styles.actionSection}>
            <TouchableOpacity
              style={[styles.actionButton, { backgroundColor: COLORS.primary }]}
              onPress={handleEdit}
            >
              <Ionicons name="create-outline" size={20} color={COLORS.white} />
              <Text style={[styles.actionButtonText, { color: COLORS.white }]}>
                ÏàòÏ†ïÌïòÍ∏∞
              </Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={[styles.actionButton, { backgroundColor: COLORS.success }]}
              onPress={() =>
                Alert.alert(
                  "Í∏∞Îä• Ï§ÄÎπÑÏ§ë",
                  "PDF ÎÇ¥Î≥¥ÎÇ¥Í∏∞ Í∏∞Îä•ÏùÄ Í≥ß Ï†úÍ≥µÎê† ÏòàÏ†ïÏûÖÎãàÎã§."
                )
              }
            >
              <Ionicons
                name="download-outline"
                size={20}
                color={COLORS.white}
              />
              <Text style={[styles.actionButtonText, { color: COLORS.white }]}>
                PDF ÎÇ¥Î≥¥ÎÇ¥Í∏∞
              </Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={[styles.actionButton, { backgroundColor: COLORS.error }]}
              onPress={handleDelete}
            >
              <Ionicons name="trash-outline" size={20} color={COLORS.white} />
              <Text style={[styles.actionButtonText, { color: COLORS.white }]}>
                ÏÇ≠Ï†úÌïòÍ∏∞
              </Text>
            </TouchableOpacity>
          </View>
        </ScrollView>
      </SafeAreaView>
    </>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  header: {
    paddingHorizontal: 16,
    paddingVertical: 16,
  },
  headerContent: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
  },
  backButton: {
    padding: 8,
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: "600",
    flex: 1,
    textAlign: "center",
    marginHorizontal: 16,
  },
  editButton: {
    padding: 8,
  },
  content: {
    flex: 1,
    padding: 16,
  },
  section: {
    padding: 16,
    borderRadius: 12,
    marginBottom: 16,
    borderWidth: 1,
    borderColor: "#e0e0e0",
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: "600",
    marginBottom: 16,
  },
  infoRow: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: 12,
  },
  infoLabel: {
    fontSize: 14,
    flex: 1,
  },
  infoValue: {
    fontSize: 14,
    fontWeight: "600",
    flex: 2,
    textAlign: "right",
  },
  statusContainer: {
    flexDirection: "row",
    alignItems: "center",
    gap: 8,
  },
  statusBadge: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 6,
  },
  statusText: {
    fontSize: 12,
    fontWeight: "600",
  },
  statusChangeButton: {
    padding: 4,
  },
  itemCard: {
    padding: 12,
    borderRadius: 8,
    marginBottom: 12,
    borderWidth: 1,
    borderColor: "#e0e0e0",
  },
  itemHeader: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: 12,
  },
  itemName: {
    fontSize: 16,
    fontWeight: "600",
    flex: 1,
  },
  taxTypeBadge: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 6,
  },
  taxTypeText: {
    fontSize: 12,
    fontWeight: "600",
  },
  itemDetails: {
    gap: 4,
  },
  itemDetailRow: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
  },
  itemDetailLabel: {
    fontSize: 14,
  },
  itemDetailValue: {
    fontSize: 14,
  },
  itemTotalLabel: {
    fontSize: 14,
    fontWeight: "600",
  },
  itemTotalValue: {
    fontSize: 14,
    fontWeight: "600",
  },
  totalContainer: {
    gap: 8,
  },
  totalRow: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    paddingTop: 8,
    borderTopWidth: 1,
    borderTopColor: "#e0e0e0",
  },
  totalLabel: {
    fontSize: 14,
  },
  totalValue: {
    fontSize: 14,
  },
  grandTotalRow: {
    marginTop: 8,
    paddingTop: 12,
    borderTopWidth: 2,
    borderTopColor: "#333",
  },
  grandTotalLabel: {
    fontSize: 16,
    fontWeight: "600",
  },
  grandTotalValue: {
    fontSize: 18,
    fontWeight: "700",
  },
  actionSection: {
    flexDirection: "row",
    gap: 12,
    marginTop: 16,
    marginBottom: 100,
  },
  actionButton: {
    flex: 1,
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    paddingVertical: 12,
    borderRadius: 8,
    gap: 8,
  },
  actionButtonText: {
    fontSize: 16,
    fontWeight: "600",
  },
});

export default InvoiceDetailScreen;
